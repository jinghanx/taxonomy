/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/mwMrU1IfEIg
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client"

import { useEffect, useRef, useState } from "react"
import Image from "next/image"
import Link from "next/link"

import {
  Breadcrumb,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbList,
  BreadcrumbPage,
  BreadcrumbSeparator,
} from "@/components/ui/breadcrumb"
import { Button } from "@/components/ui/button"
import { Slider } from "@/components/ui/slider"

export function BookReader() {
  const [currentPage, setCurrentPage] = useState(0)
  const [mode, setMode] = useState("default")
  const [annotateMode, setAnnotateMode] = useState("default")
  const [annotateColor, setAnnotateColor] = useState("#000000")
  const [annotateWidth, setAnnotateWidth] = useState(2)
  const [leftPage, setLeftPage] = useState(0)
  const [rightPage, setRightPage] = useState(1)
  const [isDrawing, setIsDrawing] = useState(false)
  const canvasRef = useRef<HTMLCanvasElement>(null)

  const book = [
    {
      title: "The Curious Caterpillar",
      content: (
        <div className="grid h-full items-center justify-center gap-4">
          <h1 className="text-center text-4xl font-bold">
            The Curious Caterpillar
          </h1>
          <Image
            src="/book1.jpg"
            alt="Caterpillar"
            width={800}
            className="mx-auto"
          />
          <p className="text-center text-lg">
            Once upon a time, there was a curious caterpillar who loved to
            explore the garden.
          </p>
        </div>
      ),
    },
    {
      title: "A New Friend",
      content: (
        <div className="grid h-full items-center justify-center gap-4">
          <h1 className="text-center text-4xl font-bold">A New Friend</h1>
          <Image
            src="/book2.jpg"
            alt="Butterfly"
            width={800}
            className="mx-auto"
          />
          <p className="text-center text-lg">
            One day, the caterpillar met a beautiful butterfly and they became
            the best of friends.
          </p>
        </div>
      ),
    },
    {
      title: "A Transformation",
      content: (
        <div className="grid h-full items-center justify-center gap-4">
          <h1 className="text-center text-4xl font-bold">A Transformation</h1>
          <Image
            src="/book3.jpg"
            alt="Cocoon"
            width={800}
            className="mx-auto"
          />
          <p className="text-center text-lg">
            The caterpillar went into a cocoon and emerged as a beautiful
            butterfly, just like its new friend.
          </p>
        </div>
      ),
    },
    {
      title: "A Colorful Adventure",
      content: (
        <div className="grid h-full items-center justify-center gap-4">
          <h1 className="text-center text-4xl font-bold">
            A Colorful Adventure
          </h1>
          <Image
            src="/book4.jpg"
            alt="Butterflies"
            width={800}
            className="mx-auto"
          />
          <p className="text-center text-lg">
            The two butterflies flew through the garden, exploring the colorful
            flowers and having a wonderful time.
          </p>
        </div>
      ),
    },
  ]

  useEffect(() => {
    const canvas = canvasRef.current
    if (canvas) {
      const context = canvas!.getContext("2d")
      if (context) {
        context.strokeStyle = annotateColor
        context.lineWidth = annotateWidth
      }
    }
  }, [annotateColor, annotateWidth])

  const handlePrevious = () => {
    if (mode === "side-by-side") {
      setLeftPage(Math.max(0, leftPage - 2))
      setRightPage(Math.max(1, rightPage - 2))
    } else {
      setCurrentPage(Math.max(0, currentPage - 1))
    }
  }

  const handleNext = () => {
    if (mode === "side-by-side") {
      setLeftPage(Math.min(book.length - 2, leftPage + 2))
      setRightPage(Math.min(book.length - 1, rightPage + 2))
    } else {
      setCurrentPage(Math.min(book.length - 1, currentPage + 1))
    }
  }

  const handleExit = () => {}

  const handleAnnotate = () => {
    setAnnotateMode(annotateMode === "default" ? "annotate" : "default")
  }

  const handleModeChange = () => {
    if (mode === "default") {
      setMode("side-by-side")
      setLeftPage(Math.floor(currentPage / 2) * 2)
      setRightPage(
        Math.min(book.length - 1, Math.floor(currentPage / 2) * 2 + 1)
      )
    } else {
      setMode("default")
      setCurrentPage(leftPage)
    }
  }

  const startDrawing = (e) => {
    setIsDrawing(true)
    draw(e)
  }

  const stopDrawing = () => {
    setIsDrawing(false)
    const canvas = canvasRef.current
    if (canvas) {
      const context = canvas.getContext("2d")
      context?.beginPath()
    }
  }

  const draw = (e) => {
    if (!isDrawing) return
    const canvas = canvasRef.current
    if (!canvas) return
    const context = canvas.getContext("2d")
    if (!context) return
    const rect = canvas.getBoundingClientRect()
    if (!rect) return
    const x = e.clientX - rect.left
    const y = e.clientY - rect.top
    context.lineTo(x, y)
    context.stroke()
    context.beginPath()
    context.moveTo(x, y)
  }

  return (
    <div className="fixed inset-0 flex bg-background text-foreground">
      <aside className="group flex w-14 flex-col items-center gap-4 border-r bg-muted py-4 transition-all duration-300 hover:w-56">
        <Link
          href="#"
          className="flex h-9 w-9 items-center justify-center rounded-full bg-primary text-primary-foreground"
          prefetch={false}
        >
          <BookIcon className="h-5 w-5" />
        </Link>
        <nav className="flex w-full flex-col items-start gap-4">
          <Link
            href="/"
            className="flex h-9 w-full items-center justify-start gap-2 rounded-lg px-4 text-muted-foreground hover:text-foreground"
            prefetch={false}
          >
            <HomeIcon className="h-5 w-5" />
            <span className="hidden group-hover:inline">Home</span>
          </Link>
          <Link
            href="/books"
            className="flex h-9 w-full items-center justify-start gap-2 rounded-lg bg-accent px-4 text-accent-foreground"
            prefetch={false}
          >
            <BookIcon className="h-5 w-5" />
            <span className="hidden group-hover:inline">Books</span>
          </Link>
          <Link
            href="#"
            className="flex h-9 w-full items-center justify-start gap-2 rounded-lg px-4 text-muted-foreground hover:text-foreground"
            prefetch={false}
          >
            <SearchIcon className="h-5 w-5" />
            <span className="hidden group-hover:inline">Search</span>
          </Link>
        </nav>
      </aside>
      <div className="flex flex-1 flex-col">
        <div className="flex items-center justify-between border-b px-8 py-4">
          <Breadcrumb>
            <BreadcrumbList>
              <BreadcrumbItem>
                <BreadcrumbLink href="/">Home</BreadcrumbLink>
              </BreadcrumbItem>
              <BreadcrumbSeparator />
              <BreadcrumbItem>
                <BreadcrumbLink href="#">Books</BreadcrumbLink>
              </BreadcrumbItem>
              <BreadcrumbSeparator />
              <BreadcrumbItem>
                <BreadcrumbPage>{book[currentPage].title}</BreadcrumbPage>
              </BreadcrumbItem>
            </BreadcrumbList>
          </Breadcrumb>
          <div className="flex items-center gap-2">
            <Button
              variant="outline"
              onClick={handlePrevious}
              disabled={currentPage === 0}
              className="px-3 py-2"
            >
              Previous
            </Button>
            <div className="text-lg font-medium">
              {currentPage + 1} of {book.length}
            </div>
            <Button
              variant="outline"
              onClick={handleNext}
              disabled={currentPage === book.length - 1}
              className="px-3 py-2"
            >
              Next
            </Button>
            <Button
              variant="outline"
              onClick={handleExit}
              className="px-3 py-2"
            >
              Exit
            </Button>
            <Button
              variant="outline"
              onClick={handleAnnotate}
              className="px-3 py-2"
            >
              {annotateMode === "default" ? "Annotate" : "Done"}
            </Button>
            <Button
              variant="outline"
              onClick={handleModeChange}
              className="px-3 py-2"
            >
              {mode === "default" ? "Side by Side" : "Default"}
            </Button>
          </div>
        </div>
        <div className="relative flex-1">
          <div
            className={`h-full ${
              mode === "side-by-side" ? "flex" : "grid"
            } items-center justify-center p-8`}
          >
            {mode === "side-by-side" ? (
              <>
                <div className="flex h-full w-1/2 items-center justify-center">
                  {book[leftPage].content}
                </div>
                <div className="flex h-full w-1/2 items-center justify-center">
                  {book[rightPage].content}
                </div>
              </>
            ) : (
              book[currentPage].content
            )}
          </div>
          {annotateMode === "annotate" && (
            <canvas
              ref={canvasRef}
              className="absolute inset-0 z-10 cursor-crosshair"
              width={window.innerWidth}
              height={window.innerHeight}
              onMouseDown={startDrawing}
              onMouseUp={stopDrawing}
              onMouseMove={draw}
              onMouseOut={stopDrawing}
            />
          )}
        </div>
        {annotateMode === "annotate" && (
          <div className="fixed inset-x-0 bottom-0 flex items-center justify-between border-t bg-background p-4">
            <div className="flex items-center gap-2">
              <Button
                variant="outline"
                className="rounded-full"
                onClick={() => setAnnotateMode("default")}
              >
                <XIcon className="h-4 w-4" />
              </Button>
              <div className="w-32" />
              <Slider
                value={[annotateWidth]}
                onValueChange={(value) => setAnnotateWidth(value[0])}
                min={1}
                max={10}
                step={1}
                className="w-32"
              />
              <Button variant="outline" className="rounded-full">
                <PenIcon className="h-4 w-4" />
              </Button>
              <Button variant="outline" className="rounded-full">
                <EraserIcon className="h-4 w-4" />
              </Button>
            </div>
            <Button variant="outline" className="px-3 py-2">
              Save Annotation
            </Button>
          </div>
        )}
      </div>
    </div>
  )
}

function BookIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H20v20H6.5a2.5 2.5 0 0 1 0-5H20" />
    </svg>
  )
}

function EraserIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="m7 21-4.3-4.3c-1-1-1-2.5 0-3.4l9.6-9.6c1-1 2.5-1 3.4 0l5.6 5.6c1 1 1 2.5 0 3.4L13 21" />
      <path d="M22 21H7" />
      <path d="m5 11 9 9" />
    </svg>
  )
}

function HomeIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="m3 9 9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z" />
      <polyline points="9 22 9 12 15 12 15 22" />
    </svg>
  )
}

function PenIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M17 3a2.85 2.83 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5Z" />
    </svg>
  )
}

function SearchIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <circle cx="11" cy="11" r="8" />
      <path d="m21 21-4.3-4.3" />
    </svg>
  )
}

function XIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M18 6 6 18" />
      <path d="m6 6 12 12" />
    </svg>
  )
}
